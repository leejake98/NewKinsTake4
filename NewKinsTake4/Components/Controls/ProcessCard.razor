<div class="process-box" style="@backgroundColor">
    <div class="process-box-inner">
        <!-- Frontside Card -->
        <div class="frontside-card" @onclick="ClickOnCardHappened" style="@backgroundColor">
            <div class="image-section">
                <img src="@imageString" alt="Card Image" class="front-image">
            </div>
            <div class="text-section">
                @((MarkupString)Markdig.Markdown.ToHtml(frontCardText))
            </div>
        </div>

        <!-- Backside Card -->
        <div class="backside-card">
            <div class="backside-header">
                <!-- Pin Icon (Left Aligned) -->
                <svg class="pin" xmlns="http://www.w3.org/2000/svg" @onclick="ClickOnPinHappened" @onclick:stopPropagation>
                    <path d="M4.146.146A.5.5 0 0 1 4.5 0h7a.5.5 0 0 1 .5.5c0 .68-.342 1.174-.646 1.479-.126.125-.25.224-.354.298v4.431l.078.048c.203.127.476.314.751.555C12.36 7.775 13 8.527 13 9.5a.5.5 0 0 1-.5.5h-4v4.5c0 .276-.224 1.5-.5 1.5s-.5-1.224-.5-1.5V10h-4a.5.5 0 0 1-.5-.5c0-.973.64-1.725 1.17-2.189A6 6 0 0 1 5 6.708V2.277a3 3 0 0 1-.354-.298C4.342 1.674 4 1.179 4 .5a.5.5 0 0 1 .146-.354" />
                </svg>

                <!-- Language Toggle Buttons -->
                <div class="language-toggle">
                    @* Language buttons with updated styling *@
                    @* Using variables for language codes *@
                    @{
                        string en = "en";
                        string ko = "ko";
                    }
                    <button class="lang-btn en-btn" @onclick="() => SetLanguage(en)" @onclick:stopPropagation disabled="@isEnglishSelected">
                        <img src="us.png" alt="English" class="flag-icon">
                    </button>
                    <button class="lang-btn ko-btn" @onclick="() => SetLanguage(ko)" @onclick:stopPropagation disabled="@isKoreanSelected">
                        <img src="kr.png" alt="Korean" class="flag-icon">
                    </button>
                </div>

                <!-- Image Icon (Right Aligned) -->
                <svg class="image-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" viewBox="0 0 16 16" @onclick="ToggleImageVisibility" @onclick:stopPropagation>
                    <path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" />
                    <path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A.5.5 0 0 1 14.5 2z" />
                </svg>
            </div>

            <!-- Middle Thumbnail Image Section -->
            <div class="middle-thumbnail-image" style="@isThumbnailVisible" @onclick="ClickOnCardHappened">
                <img src="@imageString" alt="Thumbnail Image" class="hidden-thumbnail-image">
            </div>

            <!-- Backside Text Section -->
            <div class="text-section" @onclick="ClickOnCardHappened">
                @((MarkupString)Markdig.Markdown.ToHtml(backCardText))
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public WorkflowModel? Workflow { get; set; }

    [Parameter]
    public EventCallback<WorkflowModel> OnClickOnCard { get; set; }

    [Parameter]
    public EventCallback<WorkflowModel> OnClickOnPin { get; set; }

    private string imageString = "";
    private string frontCardText = "";
    private string backCardText = "";
    private string backgroundColor = "";


    private string isThumbnailVisible = "display:none;";
    private bool isEnglishSelected = true;
    private bool isKoreanSelected = false;

    protected override void OnParametersSet()
    {
        imageString = string.IsNullOrEmpty(Workflow?.KinsPageNumber)
            ? "default_image.png"
            : $"thumbnailImages/{Workflow.KinsPageNumber}.png";

        frontCardText = string.IsNullOrEmpty(Workflow?.KinsPageName)
            ? "Untitled"
            : "**" + Workflow.KinsPageName + "** (" + Workflow.KinsPageNumber + ")";

        backgroundColor = string.IsNullOrEmpty(Workflow?.KinsPageNumber)
            ? ""
            : Workflow.KinsPageNumber.EndsWith("_Related_Work") ? "background-color: rgba(248, 248, 248, 0.7);" : "";

        UpdateBackCardText();
    }

    private void SetLanguage(string language)
    {
        isEnglishSelected = language == "en";
        isKoreanSelected = language == "ko";
        UpdateBackCardText();
    }

    private void UpdateBackCardText()
    {
        backCardText = isEnglishSelected
            ? (string.IsNullOrEmpty(Workflow?.WorkStageName) ? "Untitled" : Workflow.WorkStageName)
            : (string.IsNullOrEmpty(Workflow?.WorkStageNameKo) ? "Untitled" : Workflow.WorkStageNameKo);
    }

    private async Task ClickOnCardHappened()
    {
        if (Workflow != null)
        {
            if (!string.IsNullOrEmpty(Workflow.KinsPageNumber))
            {
                if (!Workflow.KinsPageNumber.EndsWith("_Related_Work"))
                {
                    await OnClickOnCard.InvokeAsync(Workflow);
                }
            }
        }
    }

    private async Task ClickOnPinHappened()
    {
        if (Workflow != null)
        {
            await OnClickOnPin.InvokeAsync(Workflow);
        }
    }

    private void ToggleImageVisibility()
    {
        isThumbnailVisible = isThumbnailVisible == "display:block;" ? "display:none;" : "display:block;";
    }
}
